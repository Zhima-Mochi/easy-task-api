// Code generated by MockGen. DO NOT EDIT.
// Source: task_app_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/Zhima-Mochi/easy-task-api/app/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskAppService is a mock of TaskAppService interface.
type MockTaskAppService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskAppServiceMockRecorder
}

// MockTaskAppServiceMockRecorder is the mock recorder for MockTaskAppService.
type MockTaskAppServiceMockRecorder struct {
	mock *MockTaskAppService
}

// NewMockTaskAppService creates a new mock instance.
func NewMockTaskAppService(ctrl *gomock.Controller) *MockTaskAppService {
	mock := &MockTaskAppService{ctrl: ctrl}
	mock.recorder = &MockTaskAppServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAppService) EXPECT() *MockTaskAppServiceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskAppService) CreateTask(ctx context.Context, req *dto.TaskCreateRequest) (*dto.TaskCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, req)
	ret0, _ := ret[0].(*dto.TaskCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskAppServiceMockRecorder) CreateTask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskAppService)(nil).CreateTask), ctx, req)
}

// DeleteTask mocks base method.
func (m *MockTaskAppService) DeleteTask(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskAppServiceMockRecorder) DeleteTask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskAppService)(nil).DeleteTask), ctx, id)
}

// GetAllTask mocks base method.
func (m *MockTaskAppService) GetAllTask(ctx context.Context) ([]*dto.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTask", ctx)
	ret0, _ := ret[0].([]*dto.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTask indicates an expected call of GetAllTask.
func (mr *MockTaskAppServiceMockRecorder) GetAllTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTask", reflect.TypeOf((*MockTaskAppService)(nil).GetAllTask), ctx)
}

// GetTaskByID mocks base method.
func (m *MockTaskAppService) GetTaskByID(ctx context.Context, id string) (*dto.TaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", ctx, id)
	ret0, _ := ret[0].(*dto.TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskAppServiceMockRecorder) GetTaskByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskAppService)(nil).GetTaskByID), ctx, id)
}

// UpdateTask mocks base method.
func (m *MockTaskAppService) UpdateTask(ctx context.Context, req *dto.TaskUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskAppServiceMockRecorder) UpdateTask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskAppService)(nil).UpdateTask), ctx, req)
}
